name: Publish

on:
  push:
    branches:
      - "develop"
      - "main"

# Run all publish workflow in sequence to ensure consistent version numbers.
concurrency:
  group: "publish"

permissions: write-all

jobs:
  determine-version:
    name: "determine version"
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.find-version.outputs.result }}
      tag: ${{ steps.find-tag.outputs.result }}
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v4
      - name: "Install dependencies"
        run: npm install @octokit/rest
      - name: "Find version"
        id: find-version
        uses: actions/github-script@v7
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BASE_IMAGE_NAME: ${{ vars.BASE_IMAGE_NAME }}
        with:
          result-encoding: string
          script: |
            const { findSourceAndTargetBranches } = await import('${{ github.workspace }}/.github/scripts/branch.utils.mjs');
            const {
              determineNextDevVersion,
              stringifyVersion,
            } = await import('${{ github.workspace }}/.github/scripts/version.utils.mjs');

            const [source, target] = await findSourceAndTargetBranches(context);
            const nextVersion = target === 'develop'
              ? await determineNextDevVersion(source)
              : await determineNextRcVersionBySourceBranch(source);

            return stringifyVersion(nextVersion);
      - name: "Find tag"
        id: find-tag
        uses: actions/github-script@v7
        env:
          branch: ${{ github.ref_name }}
        with:
          result-encoding: string
          script: |
            return process.env.branch === 'develop' ? 'edge' : 'release-candidate'

  build-and-push-api:
    name: "build and push api"
    needs:
      - determine-version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Create image
        uses: ./.github/actions/create-image
        with:
          IMAGE_NAME: ${{ vars.BASE_IMAGE_NAME }}-api
          TAG: ${{ needs.determine-version.outputs.tag }}
          VERSION: ${{ needs.determine-version.outputs.version }}
          DOCKERFILE: ./apps/server-asset-sg/docker/Dockerfile
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-and-push-app:
    name: "build and push app"
    needs:
      - determine-version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Create image
        uses: ./.github/actions/create-image
        with:
          IMAGE_NAME: ${{ vars.BASE_IMAGE_NAME }}-app
          TAG: ${{ needs.determine-version.outputs.tag }}
          VERSION: ${{ needs.determine-version.outputs.version }}
          DOCKERFILE: ./apps/client-asset-sg/docker/Dockerfile
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-and-push-sync:
    name: "build and push sync"
    needs:
      - determine-version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Create image
        uses: ./.github/actions/create-image
        with:
          IMAGE_NAME: ${{ vars.BASE_IMAGE_NAME }}-sync
          TAG: ${{ needs.determine-version.outputs.tag }}
          VERSION: ${{ needs.determine-version.outputs.version }}
          DOCKERFILE: ./apps/sync-asset-sg/docker/Dockerfile
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  tag-commit:
    name: "tag commit"
    needs:
      - determine-version
      - build-and-push-api
      - build-and-push-app
      - build-and-push-sync
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: tag commit
        uses: ./.github/actions/tag-commit
        with:
          TAG_NAME: ${{ needs.determine-version.outputs.tag }}
          SHA: ${{ github.sha }}
